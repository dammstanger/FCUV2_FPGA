// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: scfifo 

// ============================================================
// File Name: fifo_module.v
// Megafunction Name(s):
// 			scfifo
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 11.0 Build 208 07/03/2011 SP 1 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2011 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//scfifo ADD_RAM_OUTPUT_REGISTER="ON" DEVICE_FAMILY="Cyclone IV E" LPM_NUMWORDS=4 LPM_SHOWAHEAD="OFF" LPM_WIDTH=8 LPM_WIDTHU=2 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" clock data empty full q rdreq wrreq INTENDED_DEVICE_FAMILY="Cyclone IV E" lpm_hint="RAM_BLOCK_TYPE=M9K" RAM_BLOCK_TYPE="M9K"
//VERSION_BEGIN 11.0SP1 cbx_altdpram 2011:07:03:21:05:55:SJ cbx_altsyncram 2011:07:03:21:05:55:SJ cbx_cycloneii 2011:07:03:21:05:55:SJ cbx_fifo_common 2011:07:03:21:05:54:SJ cbx_lpm_add_sub 2011:07:03:21:05:55:SJ cbx_lpm_compare 2011:07:03:21:05:55:SJ cbx_lpm_counter 2011:07:03:21:05:55:SJ cbx_lpm_decode 2011:07:03:21:05:55:SJ cbx_lpm_mux 2011:07:03:21:05:55:SJ cbx_mgl 2011:07:03:21:07:56:SJ cbx_scfifo 2011:07:03:21:05:55:SJ cbx_stratix 2011:07:03:21:05:55:SJ cbx_stratixii 2011:07:03:21:05:55:SJ cbx_stratixiii 2011:07:03:21:05:55:SJ cbx_stratixv 2011:07:03:21:05:55:SJ cbx_util_mgl 2011:07:03:21:05:55:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_dpfifo ADD_RAM_OUTPUT_REGISTER="ON" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_NUMWORDS=4 LPM_SHOWAHEAD="OFF" lpm_width=8 lpm_widthu=2 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" clock data empty full q rreq sclr wreq INTENDED_DEVICE_FAMILY="Cyclone IV E" lpm_hint="RAM_BLOCK_TYPE=M9K" RAM_BLOCK_TYPE="M9K"
//VERSION_BEGIN 11.0SP1 cbx_altdpram 2011:07:03:21:05:55:SJ cbx_altsyncram 2011:07:03:21:05:55:SJ cbx_cycloneii 2011:07:03:21:05:55:SJ cbx_fifo_common 2011:07:03:21:05:54:SJ cbx_lpm_add_sub 2011:07:03:21:05:55:SJ cbx_lpm_compare 2011:07:03:21:05:55:SJ cbx_lpm_counter 2011:07:03:21:05:55:SJ cbx_lpm_decode 2011:07:03:21:05:55:SJ cbx_lpm_mux 2011:07:03:21:05:55:SJ cbx_mgl 2011:07:03:21:07:56:SJ cbx_scfifo 2011:07:03:21:05:55:SJ cbx_stratix 2011:07:03:21:05:55:SJ cbx_stratixii 2011:07:03:21:05:55:SJ cbx_stratixiii 2011:07:03:21:05:55:SJ cbx_stratixv 2011:07:03:21:05:55:SJ cbx_util_mgl 2011:07:03:21:05:55:SJ  VERSION_END


//altsyncram ADDRESS_ACLR_A="NONE" ADDRESS_ACLR_B="NONE" ADDRESS_REG_B="CLOCK1" CLOCK_ENABLE_INPUT_B="BYPASS" DEVICE_FAMILY="Cyclone IV E" INDATA_ACLR_A="NONE" NUMWORDS_A=4 NUMWORDS_B=4 OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="NONE" OUTDATA_REG_B="CLOCK1" RAM_BLOCK_TYPE="M9K" WIDTH_A=8 WIDTH_B=8 WIDTH_BYTEENA_A=1 WIDTHAD_A=2 WIDTHAD_B=2 WRCONTROL_ACLR_A="NONE" address_a address_b clock0 clock1 clocken1 data_a q_b wren_a
//VERSION_BEGIN 11.0SP1 cbx_altsyncram 2011:07:03:21:05:55:SJ cbx_cycloneii 2011:07:03:21:05:55:SJ cbx_lpm_add_sub 2011:07:03:21:05:55:SJ cbx_lpm_compare 2011:07:03:21:05:55:SJ cbx_lpm_decode 2011:07:03:21:05:55:SJ cbx_lpm_mux 2011:07:03:21:05:55:SJ cbx_mgl 2011:07:03:21:07:56:SJ cbx_stratix 2011:07:03:21:05:55:SJ cbx_stratixii 2011:07:03:21:05:55:SJ cbx_stratixiii 2011:07:03:21:05:55:SJ cbx_stratixv 2011:07:03:21:05:55:SJ cbx_util_mgl 2011:07:03:21:05:55:SJ  VERSION_END

//synthesis_resources = M9K 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  fifo_module_altsyncram
	( 
	address_a,
	address_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  address_a;
	input   [1:0]  address_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [7:0]  data_a;
	output   [7:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   [1:0]  address_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [7:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_ram_block1a_0portbdataout;
	wire  [0:0]   wire_ram_block1a_1portbdataout;
	wire  [0:0]   wire_ram_block1a_2portbdataout;
	wire  [0:0]   wire_ram_block1a_3portbdataout;
	wire  [0:0]   wire_ram_block1a_4portbdataout;
	wire  [0:0]   wire_ram_block1a_5portbdataout;
	wire  [0:0]   wire_ram_block1a_6portbdataout;
	wire  [0:0]   wire_ram_block1a_7portbdataout;
	wire  [1:0]  address_a_wire;
	wire  [1:0]  address_b_wire;

	cycloneive_ram_block   ram_block1a_0
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[0]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_0portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_0.clk0_core_clock_enable = "ena0",
		ram_block1a_0.clk0_input_clock_enable = "none",
		ram_block1a_0.clk1_core_clock_enable = "none",
		ram_block1a_0.clk1_input_clock_enable = "none",
		ram_block1a_0.clk1_output_clock_enable = "ena1",
		ram_block1a_0.connectivity_checking = "OFF",
		ram_block1a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_0.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_0.operation_mode = "dual_port",
		ram_block1a_0.port_a_address_width = 2,
		ram_block1a_0.port_a_data_width = 1,
		ram_block1a_0.port_a_first_address = 0,
		ram_block1a_0.port_a_first_bit_number = 0,
		ram_block1a_0.port_a_last_address = 3,
		ram_block1a_0.port_a_logical_ram_depth = 4,
		ram_block1a_0.port_a_logical_ram_width = 8,
		ram_block1a_0.port_b_address_clear = "none",
		ram_block1a_0.port_b_address_clock = "clock1",
		ram_block1a_0.port_b_address_width = 2,
		ram_block1a_0.port_b_data_out_clear = "none",
		ram_block1a_0.port_b_data_out_clock = "clock1",
		ram_block1a_0.port_b_data_width = 1,
		ram_block1a_0.port_b_first_address = 0,
		ram_block1a_0.port_b_first_bit_number = 0,
		ram_block1a_0.port_b_last_address = 3,
		ram_block1a_0.port_b_logical_ram_depth = 4,
		ram_block1a_0.port_b_logical_ram_width = 8,
		ram_block1a_0.port_b_read_enable_clock = "clock1",
		ram_block1a_0.ram_block_type = "M9K",
		ram_block1a_0.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block1a_1
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[1]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_1portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_1.clk0_core_clock_enable = "ena0",
		ram_block1a_1.clk0_input_clock_enable = "none",
		ram_block1a_1.clk1_core_clock_enable = "none",
		ram_block1a_1.clk1_input_clock_enable = "none",
		ram_block1a_1.clk1_output_clock_enable = "ena1",
		ram_block1a_1.connectivity_checking = "OFF",
		ram_block1a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_1.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_1.operation_mode = "dual_port",
		ram_block1a_1.port_a_address_width = 2,
		ram_block1a_1.port_a_data_width = 1,
		ram_block1a_1.port_a_first_address = 0,
		ram_block1a_1.port_a_first_bit_number = 1,
		ram_block1a_1.port_a_last_address = 3,
		ram_block1a_1.port_a_logical_ram_depth = 4,
		ram_block1a_1.port_a_logical_ram_width = 8,
		ram_block1a_1.port_b_address_clear = "none",
		ram_block1a_1.port_b_address_clock = "clock1",
		ram_block1a_1.port_b_address_width = 2,
		ram_block1a_1.port_b_data_out_clear = "none",
		ram_block1a_1.port_b_data_out_clock = "clock1",
		ram_block1a_1.port_b_data_width = 1,
		ram_block1a_1.port_b_first_address = 0,
		ram_block1a_1.port_b_first_bit_number = 1,
		ram_block1a_1.port_b_last_address = 3,
		ram_block1a_1.port_b_logical_ram_depth = 4,
		ram_block1a_1.port_b_logical_ram_width = 8,
		ram_block1a_1.port_b_read_enable_clock = "clock1",
		ram_block1a_1.ram_block_type = "M9K",
		ram_block1a_1.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block1a_2
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[2]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_2portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_2.clk0_core_clock_enable = "ena0",
		ram_block1a_2.clk0_input_clock_enable = "none",
		ram_block1a_2.clk1_core_clock_enable = "none",
		ram_block1a_2.clk1_input_clock_enable = "none",
		ram_block1a_2.clk1_output_clock_enable = "ena1",
		ram_block1a_2.connectivity_checking = "OFF",
		ram_block1a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_2.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_2.operation_mode = "dual_port",
		ram_block1a_2.port_a_address_width = 2,
		ram_block1a_2.port_a_data_width = 1,
		ram_block1a_2.port_a_first_address = 0,
		ram_block1a_2.port_a_first_bit_number = 2,
		ram_block1a_2.port_a_last_address = 3,
		ram_block1a_2.port_a_logical_ram_depth = 4,
		ram_block1a_2.port_a_logical_ram_width = 8,
		ram_block1a_2.port_b_address_clear = "none",
		ram_block1a_2.port_b_address_clock = "clock1",
		ram_block1a_2.port_b_address_width = 2,
		ram_block1a_2.port_b_data_out_clear = "none",
		ram_block1a_2.port_b_data_out_clock = "clock1",
		ram_block1a_2.port_b_data_width = 1,
		ram_block1a_2.port_b_first_address = 0,
		ram_block1a_2.port_b_first_bit_number = 2,
		ram_block1a_2.port_b_last_address = 3,
		ram_block1a_2.port_b_logical_ram_depth = 4,
		ram_block1a_2.port_b_logical_ram_width = 8,
		ram_block1a_2.port_b_read_enable_clock = "clock1",
		ram_block1a_2.ram_block_type = "M9K",
		ram_block1a_2.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block1a_3
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[3]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_3portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_3.clk0_core_clock_enable = "ena0",
		ram_block1a_3.clk0_input_clock_enable = "none",
		ram_block1a_3.clk1_core_clock_enable = "none",
		ram_block1a_3.clk1_input_clock_enable = "none",
		ram_block1a_3.clk1_output_clock_enable = "ena1",
		ram_block1a_3.connectivity_checking = "OFF",
		ram_block1a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_3.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_3.operation_mode = "dual_port",
		ram_block1a_3.port_a_address_width = 2,
		ram_block1a_3.port_a_data_width = 1,
		ram_block1a_3.port_a_first_address = 0,
		ram_block1a_3.port_a_first_bit_number = 3,
		ram_block1a_3.port_a_last_address = 3,
		ram_block1a_3.port_a_logical_ram_depth = 4,
		ram_block1a_3.port_a_logical_ram_width = 8,
		ram_block1a_3.port_b_address_clear = "none",
		ram_block1a_3.port_b_address_clock = "clock1",
		ram_block1a_3.port_b_address_width = 2,
		ram_block1a_3.port_b_data_out_clear = "none",
		ram_block1a_3.port_b_data_out_clock = "clock1",
		ram_block1a_3.port_b_data_width = 1,
		ram_block1a_3.port_b_first_address = 0,
		ram_block1a_3.port_b_first_bit_number = 3,
		ram_block1a_3.port_b_last_address = 3,
		ram_block1a_3.port_b_logical_ram_depth = 4,
		ram_block1a_3.port_b_logical_ram_width = 8,
		ram_block1a_3.port_b_read_enable_clock = "clock1",
		ram_block1a_3.ram_block_type = "M9K",
		ram_block1a_3.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block1a_4
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[4]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_4portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_4.clk0_core_clock_enable = "ena0",
		ram_block1a_4.clk0_input_clock_enable = "none",
		ram_block1a_4.clk1_core_clock_enable = "none",
		ram_block1a_4.clk1_input_clock_enable = "none",
		ram_block1a_4.clk1_output_clock_enable = "ena1",
		ram_block1a_4.connectivity_checking = "OFF",
		ram_block1a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_4.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_4.operation_mode = "dual_port",
		ram_block1a_4.port_a_address_width = 2,
		ram_block1a_4.port_a_data_width = 1,
		ram_block1a_4.port_a_first_address = 0,
		ram_block1a_4.port_a_first_bit_number = 4,
		ram_block1a_4.port_a_last_address = 3,
		ram_block1a_4.port_a_logical_ram_depth = 4,
		ram_block1a_4.port_a_logical_ram_width = 8,
		ram_block1a_4.port_b_address_clear = "none",
		ram_block1a_4.port_b_address_clock = "clock1",
		ram_block1a_4.port_b_address_width = 2,
		ram_block1a_4.port_b_data_out_clear = "none",
		ram_block1a_4.port_b_data_out_clock = "clock1",
		ram_block1a_4.port_b_data_width = 1,
		ram_block1a_4.port_b_first_address = 0,
		ram_block1a_4.port_b_first_bit_number = 4,
		ram_block1a_4.port_b_last_address = 3,
		ram_block1a_4.port_b_logical_ram_depth = 4,
		ram_block1a_4.port_b_logical_ram_width = 8,
		ram_block1a_4.port_b_read_enable_clock = "clock1",
		ram_block1a_4.ram_block_type = "M9K",
		ram_block1a_4.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block1a_5
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[5]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_5portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_5.clk0_core_clock_enable = "ena0",
		ram_block1a_5.clk0_input_clock_enable = "none",
		ram_block1a_5.clk1_core_clock_enable = "none",
		ram_block1a_5.clk1_input_clock_enable = "none",
		ram_block1a_5.clk1_output_clock_enable = "ena1",
		ram_block1a_5.connectivity_checking = "OFF",
		ram_block1a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_5.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_5.operation_mode = "dual_port",
		ram_block1a_5.port_a_address_width = 2,
		ram_block1a_5.port_a_data_width = 1,
		ram_block1a_5.port_a_first_address = 0,
		ram_block1a_5.port_a_first_bit_number = 5,
		ram_block1a_5.port_a_last_address = 3,
		ram_block1a_5.port_a_logical_ram_depth = 4,
		ram_block1a_5.port_a_logical_ram_width = 8,
		ram_block1a_5.port_b_address_clear = "none",
		ram_block1a_5.port_b_address_clock = "clock1",
		ram_block1a_5.port_b_address_width = 2,
		ram_block1a_5.port_b_data_out_clear = "none",
		ram_block1a_5.port_b_data_out_clock = "clock1",
		ram_block1a_5.port_b_data_width = 1,
		ram_block1a_5.port_b_first_address = 0,
		ram_block1a_5.port_b_first_bit_number = 5,
		ram_block1a_5.port_b_last_address = 3,
		ram_block1a_5.port_b_logical_ram_depth = 4,
		ram_block1a_5.port_b_logical_ram_width = 8,
		ram_block1a_5.port_b_read_enable_clock = "clock1",
		ram_block1a_5.ram_block_type = "M9K",
		ram_block1a_5.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block1a_6
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[6]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_6portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_6.clk0_core_clock_enable = "ena0",
		ram_block1a_6.clk0_input_clock_enable = "none",
		ram_block1a_6.clk1_core_clock_enable = "none",
		ram_block1a_6.clk1_input_clock_enable = "none",
		ram_block1a_6.clk1_output_clock_enable = "ena1",
		ram_block1a_6.connectivity_checking = "OFF",
		ram_block1a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_6.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_6.operation_mode = "dual_port",
		ram_block1a_6.port_a_address_width = 2,
		ram_block1a_6.port_a_data_width = 1,
		ram_block1a_6.port_a_first_address = 0,
		ram_block1a_6.port_a_first_bit_number = 6,
		ram_block1a_6.port_a_last_address = 3,
		ram_block1a_6.port_a_logical_ram_depth = 4,
		ram_block1a_6.port_a_logical_ram_width = 8,
		ram_block1a_6.port_b_address_clear = "none",
		ram_block1a_6.port_b_address_clock = "clock1",
		ram_block1a_6.port_b_address_width = 2,
		ram_block1a_6.port_b_data_out_clear = "none",
		ram_block1a_6.port_b_data_out_clock = "clock1",
		ram_block1a_6.port_b_data_width = 1,
		ram_block1a_6.port_b_first_address = 0,
		ram_block1a_6.port_b_first_bit_number = 6,
		ram_block1a_6.port_b_last_address = 3,
		ram_block1a_6.port_b_logical_ram_depth = 4,
		ram_block1a_6.port_b_logical_ram_width = 8,
		ram_block1a_6.port_b_read_enable_clock = "clock1",
		ram_block1a_6.ram_block_type = "M9K",
		ram_block1a_6.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block1a_7
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[1:0]}),
	.portadatain({data_a[7]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[1:0]}),
	.portbdataout(wire_ram_block1a_7portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_7.clk0_core_clock_enable = "ena0",
		ram_block1a_7.clk0_input_clock_enable = "none",
		ram_block1a_7.clk1_core_clock_enable = "none",
		ram_block1a_7.clk1_input_clock_enable = "none",
		ram_block1a_7.clk1_output_clock_enable = "ena1",
		ram_block1a_7.connectivity_checking = "OFF",
		ram_block1a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_7.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_7.operation_mode = "dual_port",
		ram_block1a_7.port_a_address_width = 2,
		ram_block1a_7.port_a_data_width = 1,
		ram_block1a_7.port_a_first_address = 0,
		ram_block1a_7.port_a_first_bit_number = 7,
		ram_block1a_7.port_a_last_address = 3,
		ram_block1a_7.port_a_logical_ram_depth = 4,
		ram_block1a_7.port_a_logical_ram_width = 8,
		ram_block1a_7.port_b_address_clear = "none",
		ram_block1a_7.port_b_address_clock = "clock1",
		ram_block1a_7.port_b_address_width = 2,
		ram_block1a_7.port_b_data_out_clear = "none",
		ram_block1a_7.port_b_data_out_clock = "clock1",
		ram_block1a_7.port_b_data_width = 1,
		ram_block1a_7.port_b_first_address = 0,
		ram_block1a_7.port_b_first_bit_number = 7,
		ram_block1a_7.port_b_last_address = 3,
		ram_block1a_7.port_b_logical_ram_depth = 4,
		ram_block1a_7.port_b_logical_ram_width = 8,
		ram_block1a_7.port_b_read_enable_clock = "clock1",
		ram_block1a_7.ram_block_type = "M9K",
		ram_block1a_7.lpm_type = "cycloneive_ram_block";
	assign
		address_a_wire = address_a,
		address_b_wire = address_b,
		q_b = {wire_ram_block1a_7portbdataout[0], wire_ram_block1a_6portbdataout[0], wire_ram_block1a_5portbdataout[0], wire_ram_block1a_4portbdataout[0], wire_ram_block1a_3portbdataout[0], wire_ram_block1a_2portbdataout[0], wire_ram_block1a_1portbdataout[0], wire_ram_block1a_0portbdataout[0]};
endmodule //fifo_module_altsyncram


//lpm_compare DEVICE_FAMILY="Cyclone IV E" LPM_WIDTH=2 ONE_INPUT_IS_CONSTANT="YES" aeb dataa datab
//VERSION_BEGIN 11.0SP1 cbx_cycloneii 2011:07:03:21:05:55:SJ cbx_lpm_add_sub 2011:07:03:21:05:55:SJ cbx_lpm_compare 2011:07:03:21:05:55:SJ cbx_mgl 2011:07:03:21:07:56:SJ cbx_stratix 2011:07:03:21:05:55:SJ cbx_stratixii 2011:07:03:21:05:55:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fifo_module_cmpr
	( 
	aeb,
	dataa,
	datab) /* synthesis synthesis_clearbox=1 */;
	output   aeb;
	input   [1:0]  dataa;
	input   [1:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [1:0]  dataa;
	tri0   [1:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  aeb_result_wire;
	wire  [0:0]  aneb_result_wire;
	wire  [3:0]  data_wire;
	wire  eq_wire;

	assign
		aeb = eq_wire,
		aeb_result_wire = (~ aneb_result_wire),
		aneb_result_wire = ((data_wire[0] ^ data_wire[1]) | (data_wire[2] ^ data_wire[3])),
		data_wire = {datab[1], dataa[1], datab[0], dataa[0]},
		eq_wire = aeb_result_wire;
endmodule //fifo_module_cmpr


//lpm_counter DEVICE_FAMILY="Cyclone IV E" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=1 clock cnt_en q sclr
//VERSION_BEGIN 11.0SP1 cbx_cycloneii 2011:07:03:21:05:55:SJ cbx_lpm_add_sub 2011:07:03:21:05:55:SJ cbx_lpm_compare 2011:07:03:21:05:55:SJ cbx_lpm_counter 2011:07:03:21:05:55:SJ cbx_lpm_decode 2011:07:03:21:05:55:SJ cbx_mgl 2011:07:03:21:07:56:SJ cbx_stratix 2011:07:03:21:05:55:SJ cbx_stratixii 2011:07:03:21:05:55:SJ  VERSION_END

//synthesis_resources = lut 1 reg 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fifo_module_cntr
	( 
	clock,
	cnt_en,
	q,
	sclr) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   cnt_en;
	output   [0:0]  q;
	input   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   cnt_en;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_comb_bita_0combout;
	reg	[0:0]	counter_reg_bit;
	wire	wire_counter_reg_bit_ena;
	wire	wire_counter_reg_bit_sload;
	wire  aclr_actual;
	wire clk_en;
	wire [0:0]  data;
	wire  external_cin;
	wire  [0:0]  s_val;
	wire  [0:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;

	cycloneive_lcell_comb   counter_comb_bita_0
	( 
	.cin(external_cin),
	.combout(wire_counter_comb_bita_0combout[0:0]),
	.cout(),
	.dataa(counter_reg_bit[0]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_0.lut_mask = 16'h5A90,
		counter_comb_bita_0.sum_lutc_input = "cin",
		counter_comb_bita_0.lpm_type = "cycloneive_lcell_comb";
	// synopsys translate_off
	initial
		counter_reg_bit = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit <= 1'b0;
		else if  (wire_counter_reg_bit_ena == 1'b1) 
			if (wire_counter_reg_bit_sload == 1'b1) counter_reg_bit <= ((~ sclr) & ((sset & s_val) | ((~ sset) & data)));
			else  counter_reg_bit <= {wire_counter_comb_bita_0combout};
	assign
		wire_counter_reg_bit_ena = (clk_en & (((sclr | sset) | sload) | cnt_en)),
		wire_counter_reg_bit_sload = ((sclr | sset) | sload);
	assign
		aclr_actual = 1'b0,
		clk_en = 1'b1,
		data = 1'b0,
		external_cin = 1'b1,
		q = safe_q,
		s_val = 1'b1,
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = 1'b1;
endmodule //fifo_module_cntr


//lpm_counter DEVICE_FAMILY="Cyclone IV E" lpm_width=2 clock cnt_en q sclr updown
//VERSION_BEGIN 11.0SP1 cbx_cycloneii 2011:07:03:21:05:55:SJ cbx_lpm_add_sub 2011:07:03:21:05:55:SJ cbx_lpm_compare 2011:07:03:21:05:55:SJ cbx_lpm_counter 2011:07:03:21:05:55:SJ cbx_lpm_decode 2011:07:03:21:05:55:SJ cbx_mgl 2011:07:03:21:07:56:SJ cbx_stratix 2011:07:03:21:05:55:SJ cbx_stratixii 2011:07:03:21:05:55:SJ  VERSION_END

//synthesis_resources = lut 2 reg 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fifo_module_cntr1
	( 
	clock,
	cnt_en,
	q,
	sclr,
	updown) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   cnt_en;
	output   [1:0]  q;
	input   sclr;
	input   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   cnt_en;
	tri0   sclr;
	tri1   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_comb_bita_0combout;
	wire  [0:0]   wire_counter_comb_bita_1combout;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire	[1:0]	wire_counter_reg_bit_d;
	wire	[1:0]	wire_counter_reg_bit_asdata;
	reg	[1:0]	counter_reg_bit;
	wire	[1:0]	wire_counter_reg_bit_ena;
	wire	[1:0]	wire_counter_reg_bit_sload;
	wire  aclr_actual;
	wire clk_en;
	wire [1:0]  data;
	wire  external_cin;
	wire  [1:0]  s_val;
	wire  [1:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;

	cycloneive_lcell_comb   counter_comb_bita_0
	( 
	.cin(external_cin),
	.combout(wire_counter_comb_bita_0combout[0:0]),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.dataa(counter_reg_bit[0]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_0.lut_mask = 16'h5A90,
		counter_comb_bita_0.sum_lutc_input = "cin",
		counter_comb_bita_0.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(wire_counter_comb_bita_1combout[0:0]),
	.cout(),
	.dataa(counter_reg_bit[1]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_1.lut_mask = 16'h5A90,
		counter_comb_bita_1.sum_lutc_input = "cin",
		counter_comb_bita_1.lpm_type = "cycloneive_lcell_comb";
	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	assign
		wire_counter_reg_bit_asdata = ({2{(~ sclr)}} & (({2{sset}} & s_val) | ({2{(~ sset)}} & data))),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_1combout[0:0], wire_counter_comb_bita_0combout[0:0]};
	assign
		wire_counter_reg_bit_ena = {2{(clk_en & (((sclr | sset) | sload) | cnt_en))}},
		wire_counter_reg_bit_sload = {2{((sclr | sset) | sload)}};
	assign
		aclr_actual = 1'b0,
		clk_en = 1'b1,
		data = {2{1'b0}},
		external_cin = 1'b1,
		q = safe_q,
		s_val = {2{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = updown;
endmodule //fifo_module_cntr1


//lpm_counter DEVICE_FAMILY="Cyclone IV E" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=2 clock cnt_en q sclr
//VERSION_BEGIN 11.0SP1 cbx_cycloneii 2011:07:03:21:05:55:SJ cbx_lpm_add_sub 2011:07:03:21:05:55:SJ cbx_lpm_compare 2011:07:03:21:05:55:SJ cbx_lpm_counter 2011:07:03:21:05:55:SJ cbx_lpm_decode 2011:07:03:21:05:55:SJ cbx_mgl 2011:07:03:21:07:56:SJ cbx_stratix 2011:07:03:21:05:55:SJ cbx_stratixii 2011:07:03:21:05:55:SJ  VERSION_END

//synthesis_resources = lut 2 reg 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fifo_module_cntr12
	( 
	clock,
	cnt_en,
	q,
	sclr) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   cnt_en;
	output   [1:0]  q;
	input   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   cnt_en;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_comb_bita_0combout;
	wire  [0:0]   wire_counter_comb_bita_1combout;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire	[1:0]	wire_counter_reg_bit_d;
	wire	[1:0]	wire_counter_reg_bit_asdata;
	reg	[1:0]	counter_reg_bit;
	wire	[1:0]	wire_counter_reg_bit_ena;
	wire	[1:0]	wire_counter_reg_bit_sload;
	wire  aclr_actual;
	wire clk_en;
	wire [1:0]  data;
	wire  external_cin;
	wire  [1:0]  s_val;
	wire  [1:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;

	cycloneive_lcell_comb   counter_comb_bita_0
	( 
	.cin(external_cin),
	.combout(wire_counter_comb_bita_0combout[0:0]),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.dataa(counter_reg_bit[0]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_0.lut_mask = 16'h5A90,
		counter_comb_bita_0.sum_lutc_input = "cin",
		counter_comb_bita_0.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(wire_counter_comb_bita_1combout[0:0]),
	.cout(),
	.dataa(counter_reg_bit[1]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_1.lut_mask = 16'h5A90,
		counter_comb_bita_1.sum_lutc_input = "cin",
		counter_comb_bita_1.lpm_type = "cycloneive_lcell_comb";
	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	assign
		wire_counter_reg_bit_asdata = ({2{(~ sclr)}} & (({2{sset}} & s_val) | ({2{(~ sset)}} & data))),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_1combout[0:0], wire_counter_comb_bita_0combout[0:0]};
	assign
		wire_counter_reg_bit_ena = {2{(clk_en & (((sclr | sset) | sload) | cnt_en))}},
		wire_counter_reg_bit_sload = {2{((sclr | sset) | sload)}};
	assign
		aclr_actual = 1'b0,
		clk_en = 1'b1,
		data = {2{1'b0}},
		external_cin = 1'b1,
		q = safe_q,
		s_val = {2{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = 1'b1;
endmodule //fifo_module_cntr12

//synthesis_resources = lut 5 M9K 1 reg 13 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fifo_module_a_dpfifo
	( 
	clock,
	data,
	empty,
	full,
	q,
	rreq,
	sclr,
	wreq) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  data;
	output   empty;
	output   full;
	output   [7:0]  q;
	input   rreq;
	input   sclr;
	input   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [7:0]   wire_FIFOram_q_b;
	reg	empty_dff;
	reg	full_dff;
	reg	[1:0]	low_addressa;
	reg	rd_ptr_lsb;
	wire	wire_rd_ptr_lsb_ena;
	reg	usedw_is_0_dff;
	reg	usedw_is_1_dff;
	reg	wrreq_delay;
	wire  wire_almost_full_comparer_aeb;
	wire  wire_two_comparison_aeb;
	wire  [0:0]   wire_rd_ptr_msb_q;
	wire  [1:0]   wire_usedw_counter_q;
	wire  [1:0]   wire_wr_ptr_q;
	wire aclr;
	wire  asynch_read_counter_enable;
	wire  empty_out;
	wire  full_out;
	wire  pulse_ram_output;
	wire  [1:0]  ram_read_address;
	wire  [1:0]  rd_ptr;
	wire  usedw_is_0;
	wire  usedw_is_1;
	wire  usedw_is_2;
	wire  usedw_will_be_0;
	wire  usedw_will_be_1;
	wire  valid_rreq;
	wire  valid_wreq;
	wire  wait_state;

	fifo_module_altsyncram   FIFOram
	( 
	.address_a(wire_wr_ptr_q),
	.address_b(ram_read_address),
	.clock0(clock),
	.clock1(clock),
	.clocken1(pulse_ram_output),
	.data_a(data),
	.q_b(wire_FIFOram_q_b),
	.wren_a(valid_wreq));
	// synopsys translate_off
	initial
		empty_dff = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) empty_dff <= 1'b0;
		else  empty_dff <= ((~ (usedw_will_be_0 | wait_state)) & (~ sclr));
	// synopsys translate_off
	initial
		full_dff = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) full_dff <= 1'b0;
		else  full_dff <= ((~ sclr) & (((valid_wreq & (~ valid_rreq)) & wire_almost_full_comparer_aeb) | (full_dff & (~ (valid_wreq ^ valid_rreq)))));
	// synopsys translate_off
	initial
		low_addressa = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) low_addressa <= 2'b0;
		else  low_addressa <= ({2{(~ sclr)}} & (({2{asynch_read_counter_enable}} & rd_ptr) | ({2{(~ asynch_read_counter_enable)}} & low_addressa)));
	// synopsys translate_off
	initial
		rd_ptr_lsb = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rd_ptr_lsb <= 1'b0;
		else if  (wire_rd_ptr_lsb_ena == 1'b1)   rd_ptr_lsb <= ((~ rd_ptr_lsb) & (~ sclr));
	assign
		wire_rd_ptr_lsb_ena = (asynch_read_counter_enable | sclr);
	// synopsys translate_off
	initial
		usedw_is_0_dff = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) usedw_is_0_dff <= 1'b0;
		else  usedw_is_0_dff <= (~ usedw_will_be_0);
	// synopsys translate_off
	initial
		usedw_is_1_dff = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) usedw_is_1_dff <= 1'b0;
		else  usedw_is_1_dff <= usedw_will_be_1;
	// synopsys translate_off
	initial
		wrreq_delay = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) wrreq_delay <= 1'b0;
		else  wrreq_delay <= ((~ sclr) & valid_wreq);
	fifo_module_cmpr   almost_full_comparer
	( 
	.aeb(wire_almost_full_comparer_aeb),
	.dataa({2{1'b1}}),
	.datab(wire_usedw_counter_q));
	fifo_module_cmpr   two_comparison
	( 
	.aeb(wire_two_comparison_aeb),
	.dataa(wire_usedw_counter_q),
	.datab({1'b1, 1'b0}));
	fifo_module_cntr   rd_ptr_msb
	( 
	.clock(clock),
	.cnt_en((asynch_read_counter_enable & (~ rd_ptr_lsb))),
	.q(wire_rd_ptr_msb_q),
	.sclr(sclr));
	fifo_module_cntr1   usedw_counter
	( 
	.clock(clock),
	.cnt_en((valid_wreq ^ valid_rreq)),
	.q(wire_usedw_counter_q),
	.sclr(sclr),
	.updown(valid_wreq));
	fifo_module_cntr12   wr_ptr
	( 
	.clock(clock),
	.cnt_en(valid_wreq),
	.q(wire_wr_ptr_q),
	.sclr(sclr));
	assign
		aclr = 1'b0,
		asynch_read_counter_enable = pulse_ram_output,
		empty = empty_out,
		empty_out = (~ empty_dff),
		full = full_out,
		full_out = full_dff,
		pulse_ram_output = valid_rreq,
		q = wire_FIFOram_q_b,
		ram_read_address = (({2{(~ asynch_read_counter_enable)}} & low_addressa) | ({2{asynch_read_counter_enable}} & rd_ptr)),
		rd_ptr = {wire_rd_ptr_msb_q, (~ rd_ptr_lsb)},
		usedw_is_0 = (~ usedw_is_0_dff),
		usedw_is_1 = usedw_is_1_dff,
		usedw_is_2 = wire_two_comparison_aeb,
		usedw_will_be_0 = (~ ((~ sclr) & (~ (((usedw_is_1 & valid_rreq) & (~ valid_wreq)) | (usedw_is_0 & (~ (valid_wreq ^ valid_rreq))))))),
		usedw_will_be_1 = ((~ sclr) & ((((usedw_is_2 & (~ valid_wreq)) & valid_rreq) | (usedw_is_1 & (~ (valid_wreq ^ valid_rreq)))) | ((usedw_is_0 & valid_wreq) & (~ valid_rreq)))),
		valid_rreq = (rreq & (~ empty_out)),
		valid_wreq = (wreq & (~ full_out)),
		wait_state = (usedw_will_be_1 & valid_wreq);
endmodule //fifo_module_a_dpfifo

//synthesis_resources = lut 5 M9K 1 reg 13 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fifo_module_scfifo
	( 
	clock,
	data,
	empty,
	full,
	q,
	rdreq,
	wrreq) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  data;
	output   empty;
	output   full;
	output   [7:0]  q;
	input   rdreq;
	input   wrreq;

	wire  wire_dpfifo_empty;
	wire  wire_dpfifo_full;
	wire  [7:0]   wire_dpfifo_q;
	wire sclr;

	fifo_module_a_dpfifo   dpfifo
	( 
	.clock(clock),
	.data(data),
	.empty(wire_dpfifo_empty),
	.full(wire_dpfifo_full),
	.q(wire_dpfifo_q),
	.rreq(rdreq),
	.sclr(sclr),
	.wreq(wrreq));
	assign
		empty = wire_dpfifo_empty,
		full = wire_dpfifo_full,
		q = wire_dpfifo_q,
		sclr = 1'b0;
endmodule //fifo_module_scfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module fifo_module (
	clock,
	data,
	rdreq,
	wrreq,
	empty,
	full,
	q)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[7:0]  data;
	input	  rdreq;
	input	  wrreq;
	output	  empty;
	output	  full;
	output	[7:0]  q;

	wire  sub_wire0;
	wire  sub_wire1;
	wire [7:0] sub_wire2;
	wire  empty = sub_wire0;
	wire  full = sub_wire1;
	wire [7:0] q = sub_wire2[7:0];

	fifo_module_scfifo	fifo_module_scfifo_component (
				.clock (clock),
				.data (data),
				.rdreq (rdreq),
				.wrreq (wrreq),
				.empty (sub_wire0),
				.full (sub_wire1),
				.q (sub_wire2));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "1"
// Retrieval info: PRIVATE: Clock NUMERIC "0"
// Retrieval info: PRIVATE: Depth NUMERIC "4"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "1"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "2"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "0"
// Retrieval info: PRIVATE: Width NUMERIC "8"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "8"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "0"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "0"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "0"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: ADD_RAM_OUTPUT_REGISTER STRING "ON"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: CONSTANT: LPM_HINT STRING "RAM_BLOCK_TYPE=M9K"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "4"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "scfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "2"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: data 0 0 8 0 INPUT NODEFVAL "data[7..0]"
// Retrieval info: USED_PORT: empty 0 0 0 0 OUTPUT NODEFVAL "empty"
// Retrieval info: USED_PORT: full 0 0 0 0 OUTPUT NODEFVAL "full"
// Retrieval info: USED_PORT: q 0 0 8 0 OUTPUT NODEFVAL "q[7..0]"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 8 0 data 0 0 8 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: empty 0 0 0 0 @empty 0 0 0 0
// Retrieval info: CONNECT: full 0 0 0 0 @full 0 0 0 0
// Retrieval info: CONNECT: q 0 0 8 0 @q 0 0 8 0
// Retrieval info: GEN_FILE: TYPE_NORMAL fifo_module.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fifo_module.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL fifo_module.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL fifo_module.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL fifo_module_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fifo_module_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fifo_module_syn.v TRUE
